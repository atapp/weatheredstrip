{"version":3,"sources":["components/content.react.js","components/searchbox.react.js","components/header.react.js","components/metars.react.js","components/notams.react.js","components/query.react.js","components/rvr.react.js","components/stationNav.react.js","components/tafs.react.js","App.js","serviceWorker.js","index.js"],"names":["Content","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","stationSelection","navSticky","sticky","handleStationSelect","bind","assertThisInitialized","handleScroll","window","addEventListener","removeEventListener","document","getElementById","offsetTop","pageYOffset","setState","console","log","value","objectSpread","data","react_default","a","createElement","className","stationNav_react","selected","onClick","Timestamp","rvr_react","RVR","metars_react","METAR","tafs_react","TAF","notams_react","NOTAM","Component","SearchBox","searchValue","handleSearchChange","handleSearchSubmit","event","target","preventDefault","location","href","origin","toUpperCase","type","placeholder","onChange","Header","stations","split","stationSearch","searchbox_react","Metars","_ref","children","metars","map","metar","index","key","Notams","notams","notam","title","Query","serverRequest","getInfo","callback","xhr","XMLHttpRequest","readyState","status","JSON","parse","responseText","alert","open","concat","send","_this2","res","selectedStationIndex","url","search","queryString","content_react","Rvr","id","src","alt","StationNav","classname","airport","divClass","Station","Tafs","tafs","taf","App","header_react","query_react","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88f1b95e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { StationNav, Metars, Tafs, Notams, Rvr } from \"../components\";\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stationSelection: 0,\n      navSticky: false,\n    }\n\n    this.sticky = null\n\n    this.handleStationSelect = this.handleStationSelect.bind(this)\n    this.handleScroll = this.handleScroll.bind(this)\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll() {\n    if (this.sticky === null) {\n      this.sticky = document.getElementById('navbar').offsetTop;\n    }\n\n    if (window.pageYOffset >= this.sticky) {\n      if (!this.state.navSticky) {\n        this.setState({\n          navSticky: true\n        })\n      }\n    } else {\n      console.log('small')\n      if (this.state.navSticky) {\n        this.setState({\n          navSticky: false\n        })\n      }\n    }\n  }\n\n  handleStationSelect(value) {\n    this.setState({...this.state, stationSelection: value})\n  }\n\n  render() {\n    const { data } = this.props\n\n    const content = data ? <div className=\"Content\">\n        <StationNav data={data} selected={this.state.stationSelection} onClick={this.handleStationSelect} sticky={this.state.navSticky}/>\n        <div className=\"UserContent\">\n          <div className=\"timestamp\">\n            <div>Data Timestamp: {data[this.state.stationSelection].Timestamp}</div>\n            <div>Current Timestamp: *To be completed* </div>\n          </div>\n          <div className=\"SelectedContent\">\n            <div className=\"TopPortion\">\n              <Rvr data={data[this.state.stationSelection].RVR} />\n              <div className=\"Col\">\n                <div className=\"subtitle\">METAR</div>\n                <Metars data={data[this.state.stationSelection].METAR} />\n                <div className=\"subtitle\">TAF</div>\n                <Tafs data={data[this.state.stationSelection].TAF}/>\n              </div>\n            </div>\n            <div className=\"Col\">\n              <div className=\"subtitle\">NOTAM</div>\n              <Notams data={data[this.state.stationSelection].NOTAM} />\n            </div>\n          </div>\n        </div>\n      </div>\n      :\n      <div className=\"Content\">\n        <div className=\"UserContent fullborder\">\n          <p>Please use the searchbox to initate a search.</p>\n        </div>\n      </div>\n\n\n    return content\n  }\n}\n\nexport default Content;\n","import React, { Component } from 'react';\n\nclass SearchBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: \"\"\n    }\n    this.handleSearchChange = this.handleSearchChange.bind(this)\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this)\n  }\n\n  handleSearchChange(event) {\n    this.setState({ searchValue: event.target.value })\n  }\n\n  handleSearchSubmit(event) {\n    event.preventDefault()\n    console.log(window.location)\n    window.location.href = window.location.origin + '/?stations=' + this.state.searchValue.toUpperCase()\n  }\n\n  render() {\n    return (\n      <form className=\"searchbox\">\n        <input className=\"searchbox-input\" type=\"text\" placeholder=\"CYMX CYUL...\" value={this.state.searchValue} onChange={ this.handleSearchChange}></input>\n        <button type=\"submit\" className=\"searchbox-button\" onClick={this.handleSearchSubmit}>Get Info</button>\n      </form>\n    )\n  }\n}\n\nexport default SearchBox\n","import React, { Component } from 'react';\nimport SearchBox from './searchbox.react';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchValue: \"\"\n    }\n    this.handleSearchChange = this.handleSearchChange.bind(this)\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this)\n  }\n\n  handleSearchChange(event) {\n    this.setState({ searchValue: event.target.value })\n  }\n\n  handleSearchSubmit(event) {\n    event.preventDefault()\n    const stations = this.state.searchValue.toUpperCase().split(\" \")\n    console.log(stations)\n    this.props.stationSearch(stations)\n  }\n\n  render() {\n    return (\n      <header className=\"App-header\">\n        <div className=\"App-header-content\">\n          <div className=\"App-Title\">\n            Weathered Strip\n          </div>\n          <SearchBox stationSearch={this.props.stationSearch}/>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Metars({\n  children,\n  className,\n  data,\n}) {\n  let metars;\n\n  if (data) {\n    metars = data.map((metar, index) => {\n      return (<div className=\"NotifText\" key={index}>{metar}</div>)\n    })\n  }\n\n  return (\n    <div className=\"Metars\">{metars}</div>\n  )\n}\n\nexport default Metars;\n","import React from 'react';\n\nfunction Notams({\n  children,\n  className,\n  data,\n}) {\n  let notams;\n\n  if (data) {\n    notams = data.map((notam, index) => {\n      return (\n        <div className=\"NotifText\" key={index}>\n          <div><strong>{notam.title}</strong></div>\n          <div>{notam.notam}</div>\n        </div>\n      )\n    })\n  }\n\n  return (\n    <div className=\"Notams\">{notams}</div>\n  )\n}\n\nexport default Notams;\n","import React, { Component } from 'react';\nimport queryString from 'query-string';\nimport Content from './content.react';\n\nclass Query extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: null,\n      stations: null,\n    };\n\n    this.serverRequest = this.serverRequest.bind(this)\n    this.getInfo = this.getInfo.bind(this)\n  }\n\n  serverRequest(stations, callback) {\n    var data = null;\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.addEventListener(\"readystatechange\", function () {\n      if (this.readyState === 4) {\n        if (this.status === 200) {\n          callback(JSON.parse(this.responseText))\n        } else {\n          window.alert(\"The server is unreachable...\")\n        }\n      }\n    });\n\n    xhr.open(\"GET\", `http://www.greghamel.com:3001/airport?q=${stations}`);\n    xhr.send(data);\n  }\n\n  getInfo(stations) {\n    if (stations !== this.state.stations) {\n      console.log(stations)\n\n      this.serverRequest(stations, res => {\n        const data = res\n        this.setState({data: data, selectedStationIndex: 0, stations: stations})\n      })\n    } else {\n      // The station has not changes, no update is to be done.\n    }\n  }\n\n  render() {\n    const { url } = this.props\n    if (url.search) {\n      let stations = queryString.parse(url.search).stations;\n      console.log(stations)\n      this.getInfo(stations)\n    }\n\n    return <Content data={this.state.data} />\n\n  }\n}\n\nexport default Query;\n","import React from 'react';\n\nfunction Rvr({\n  data,\n}) {\n  return ( data ?\n    <img id=\"RVR\" src={data} alt=\"Aerodrome Chart\"/> : null\n  )\n}\n\nexport default Rvr;\n","import React from 'react';\n\nfunction StationNav({\n  children,\n  className,\n  data,\n  selected,\n  onClick,\n  sticky,\n}) {\n  const classname = sticky ? \"sticky\" : null\n  const stations = data.map((airport, index) => {\n    const divClass = (selected === index ? \"Station Selected\" : \"Station\");\n    return <div className={divClass} key={index} onClick={() => onClick(index)}>{airport.Station}</div>\n  })\n  return (<div id=\"navbar\" className={classname}>{stations}</div>)\n}\n\nexport default StationNav;\n","import React from 'react';\n\nfunction Tafs({\n  children,\n  className,\n  data,\n}) {\n  let tafs;\n\n  if (data) {\n    tafs = data.map((taf, index) => {\n      return (<div className=\"NotifText\" key={index}>{taf}</div>)\n    })\n  }\n\n  return (\n    <div className=\"tafs\">{tafs}</div>\n  )\n}\n\nexport default Tafs;\n","import React, { Component } from 'react';\nimport './App.css';\n\n\n// Import of Components\nimport { Header, Query } from './components';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Query url={this.props.url} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App url={window.location}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}